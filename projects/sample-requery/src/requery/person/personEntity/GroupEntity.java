// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package requery.person.personEntity;

import io.requery.Persistable;
import io.requery.meta.Attribute;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.Cardinality;
import io.requery.meta.QueryAttribute;
import io.requery.meta.ResultAttributeBuilder;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.IntProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.query.MutableResult;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;
import java.lang.Byte;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Generated;

@Generated("io.requery.processor.EntityProcessor")
public class GroupEntity implements Group, Persistable {
    public static final Attribute<GroupEntity, MutableResult<Person>> PERSONS = 
    new ResultAttributeBuilder<GroupEntity, MutableResult<Person>, Person>("persons", MutableResult.class, Person.class)
    .setProperty(new Property<GroupEntity, MutableResult<Person>>() {
        @Override
        public MutableResult<Person> get(GroupEntity entity) {
            return entity.persons;
        }

        @Override
        public void set(GroupEntity entity, MutableResult<Person> value) {
            entity.persons = value;
        }
    })
    .setPropertyName("getPersons")
    .setPropertyState(new Property<GroupEntity, PropertyState>() {
        @Override
        public PropertyState get(GroupEntity entity) {
            return entity.$persons_state;
        }

        @Override
        public void set(GroupEntity entity, PropertyState value) {
            entity.$persons_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setCardinality(Cardinality.MANY_TO_MANY)
    .setReferencedClass(GroupEntity_PersonEntity.class)
    .setMappedAttribute(new Supplier<Attribute>() {
        @Override
        public Attribute get() {
            return PersonEntity.GROUPS;
        }
    })
    .build();

    public static final QueryAttribute<GroupEntity, Integer> ID = 
    new AttributeBuilder<GroupEntity, Integer>("id", int.class)
    .setProperty(new IntProperty<GroupEntity>() {
        @Override
        public Integer get(GroupEntity entity) {
            return entity.id;
        }

        @Override
        public void set(GroupEntity entity, Integer value) {
            entity.id = value;
        }

        @Override
        public int getInt(GroupEntity entity) {
            return entity.id;
        }

        @Override
        public void setInt(GroupEntity entity, int value) {
            entity.id = value;
        }
    })
    .setPropertyName("getId")
    .setPropertyState(new Property<GroupEntity, PropertyState>() {
        @Override
        public PropertyState get(GroupEntity entity) {
            return entity.$id_state;
        }

        @Override
        public void set(GroupEntity entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(true)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final QueryAttribute<GroupEntity, String> NAME = 
    new AttributeBuilder<GroupEntity, String>("name", String.class)
    .setProperty(new Property<GroupEntity, String>() {
        @Override
        public String get(GroupEntity entity) {
            return entity.name;
        }

        @Override
        public void set(GroupEntity entity, String value) {
            entity.name = value;
        }
    })
    .setPropertyName("getName")
    .setPropertyState(new Property<GroupEntity, PropertyState>() {
        @Override
        public PropertyState get(GroupEntity entity) {
            return entity.$name_state;
        }

        @Override
        public void set(GroupEntity entity, PropertyState value) {
            entity.$name_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<GroupEntity, Byte[]> PICTURE = 
    new AttributeBuilder<GroupEntity, Byte[]>("picture", Byte[].class)
    .setProperty(new Property<GroupEntity, Byte[]>() {
        @Override
        public Byte[] get(GroupEntity entity) {
            return entity.picture;
        }

        @Override
        public void set(GroupEntity entity, Byte[] value) {
            entity.picture = value;
        }
    })
    .setPropertyName("getPicture")
    .setPropertyState(new Property<GroupEntity, PropertyState>() {
        @Override
        public PropertyState get(GroupEntity entity) {
            return entity.$picture_state;
        }

        @Override
        public void set(GroupEntity entity, PropertyState value) {
            entity.$picture_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<GroupEntity, String> DESCRIPTION = 
    new AttributeBuilder<GroupEntity, String>("description", String.class)
    .setProperty(new Property<GroupEntity, String>() {
        @Override
        public String get(GroupEntity entity) {
            return entity.description;
        }

        @Override
        public void set(GroupEntity entity, String value) {
            entity.description = value;
        }
    })
    .setPropertyName("getDescription")
    .setPropertyState(new Property<GroupEntity, PropertyState>() {
        @Override
        public PropertyState get(GroupEntity entity) {
            return entity.$description_state;
        }

        @Override
        public void set(GroupEntity entity, PropertyState value) {
            entity.$description_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<GroupEntity, GroupType> TYPE = 
    new AttributeBuilder<GroupEntity, GroupType>("type", GroupType.class)
    .setProperty(new Property<GroupEntity, GroupType>() {
        @Override
        public GroupType get(GroupEntity entity) {
            return entity.type;
        }

        @Override
        public void set(GroupEntity entity, GroupType value) {
            entity.type = value;
        }
    })
    .setPropertyName("getType")
    .setPropertyState(new Property<GroupEntity, PropertyState>() {
        @Override
        public PropertyState get(GroupEntity entity) {
            return entity.$type_state;
        }

        @Override
        public void set(GroupEntity entity, PropertyState value) {
            entity.$type_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<GroupEntity, Integer> VERSION = 
    new AttributeBuilder<GroupEntity, Integer>("version", int.class)
    .setProperty(new IntProperty<GroupEntity>() {
        @Override
        public Integer get(GroupEntity entity) {
            return entity.version;
        }

        @Override
        public void set(GroupEntity entity, Integer value) {
            entity.version = value;
        }

        @Override
        public int getInt(GroupEntity entity) {
            return entity.version;
        }

        @Override
        public void setInt(GroupEntity entity, int value) {
            entity.version = value;
        }
    })
    .setPropertyName("getVersion")
    .setPropertyState(new Property<GroupEntity, PropertyState>() {
        @Override
        public PropertyState get(GroupEntity entity) {
            return entity.$version_state;
        }

        @Override
        public void set(GroupEntity entity, PropertyState value) {
            entity.$version_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .setVersion(true)
    .build();

    public static final Type<GroupEntity> $TYPE = new TypeBuilder<GroupEntity>(GroupEntity.class, "Groups")
    .setBaseType(Group.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setFactory(new Supplier<GroupEntity>() {
        @Override
        public GroupEntity get() {
            return new GroupEntity();
        }
    })
    .setProxyProvider(new Function<GroupEntity, EntityProxy<GroupEntity>>() {
        @Override
        public EntityProxy<GroupEntity> apply(GroupEntity entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(PERSONS)
    .addAttribute(PICTURE)
    .addAttribute(DESCRIPTION)
    .addAttribute(VERSION)
    .addAttribute(ID)
    .addAttribute(TYPE)
    .addAttribute(NAME)
    .build();

    private PropertyState $persons_state;

    private PropertyState $id_state;

    private PropertyState $temporaryName_state;

    private PropertyState $name_state;

    private PropertyState $picture_state;

    private PropertyState $description_state;

    private PropertyState $type_state;

    private PropertyState $version_state;

    private MutableResult<Person> persons;

    private int id;

    private String temporaryName;

    private String name;

    private Byte[] picture;

    private String description;

    private GroupType type;

    private int version;

    private final transient EntityProxy<GroupEntity> $proxy = new EntityProxy<GroupEntity>(this, $TYPE);

    public GroupEntity() {
    }

    @Override
    public MutableResult<Person> getPersons() {
        return $proxy.get(PERSONS);
    }

    public void setPersons(MutableResult<Person> persons) {
        $proxy.set(PERSONS, persons);
    }

    @Override
    public int getId() {
        return $proxy.get(ID);
    }

    public void setId(int id) {
        $proxy.set(ID, id);
    }

    @Override
    public String getTemporaryName() {
        return this.temporaryName;
    }

    public void setTemporaryName(String temporaryName) {
        this.temporaryName = temporaryName;
    }

    @Override
    public String getName() {
        return $proxy.get(NAME);
    }

    public void setName(String name) {
        $proxy.set(NAME, name);
    }

    @Override
    public Byte[] getPicture() {
        return $proxy.get(PICTURE);
    }

    public void setPicture(Byte[] picture) {
        $proxy.set(PICTURE, picture);
    }

    @Override
    public Optional<String> getDescription() {
        return Optional.ofNullable($proxy.get(DESCRIPTION));
    }

    public void setDescription(String description) {
        $proxy.set(DESCRIPTION, description);
    }

    @Override
    public GroupType getType() {
        return $proxy.get(TYPE);
    }

    public void setType(GroupType type) {
        $proxy.set(TYPE, type);
    }

    @Override
    public int getVersion() {
        return $proxy.get(VERSION);
    }

    public void setVersion(int version) {
        $proxy.set(VERSION, version);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof GroupEntity && ((GroupEntity)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
