// Generated file do not edit, generated by io.requery.processor.EntityProcessor
package requery.person.personEntity;

import io.requery.Persistable;
import io.requery.ReferentialAction;
import io.requery.meta.Attribute;
import io.requery.meta.AttributeBuilder;
import io.requery.meta.Cardinality;
import io.requery.meta.QueryAttribute;
import io.requery.meta.QueryExpression;
import io.requery.meta.Type;
import io.requery.meta.TypeBuilder;
import io.requery.proxy.BooleanProperty;
import io.requery.proxy.EntityProxy;
import io.requery.proxy.IntProperty;
import io.requery.proxy.Property;
import io.requery.proxy.PropertyState;
import io.requery.util.function.Function;
import io.requery.util.function.Supplier;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import javax.annotation.Generated;

@Generated("io.requery.processor.EntityProcessor")
public class PhoneEntity implements Phone, Persistable {
    public static final QueryExpression<Integer> OWNER_ID = 
    new AttributeBuilder<PhoneEntity, Integer>("owner", int.class)
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setForeignKey(true)
    .setReferencedClass(PersonEntity.class)
    .setReferencedAttribute(new Supplier<Attribute>() {
        @Override
        public Attribute get() {
            return PersonEntity.ID;
        }
    })
    .setDeleteAction(ReferentialAction.CASCADE)
    .setUpdateAction(ReferentialAction.CASCADE)
    .build();

    public static final QueryAttribute<PhoneEntity, Person> OWNER = 
    new AttributeBuilder<PhoneEntity, Person>("owner", Person.class)
    .setProperty(new Property<PhoneEntity, Person>() {
        @Override
        public Person get(PhoneEntity entity) {
            return entity.owner;
        }

        @Override
        public void set(PhoneEntity entity, Person value) {
            entity.owner = value;
        }
    })
    .setPropertyName("getOwner")
    .setPropertyState(new Property<PhoneEntity, PropertyState>() {
        @Override
        public PropertyState get(PhoneEntity entity) {
            return entity.$owner_state;
        }

        @Override
        public void set(PhoneEntity entity, PropertyState value) {
            entity.$owner_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .setForeignKey(true)
    .setReferencedClass(PersonEntity.class)
    .setReferencedAttribute(new Supplier<Attribute>() {
        @Override
        public Attribute get() {
            return PersonEntity.ID;
        }
    })
    .setDeleteAction(ReferentialAction.CASCADE)
    .setUpdateAction(ReferentialAction.CASCADE)
    .setCardinality(Cardinality.MANY_TO_ONE)
    .build();

    public static final QueryAttribute<PhoneEntity, Integer> ID = 
    new AttributeBuilder<PhoneEntity, Integer>("id", int.class)
    .setProperty(new IntProperty<PhoneEntity>() {
        @Override
        public Integer get(PhoneEntity entity) {
            return entity.id;
        }

        @Override
        public void set(PhoneEntity entity, Integer value) {
            entity.id = value;
        }

        @Override
        public int getInt(PhoneEntity entity) {
            return entity.id;
        }

        @Override
        public void setInt(PhoneEntity entity, int value) {
            entity.id = value;
        }
    })
    .setPropertyName("getId")
    .setPropertyState(new Property<PhoneEntity, PropertyState>() {
        @Override
        public PropertyState get(PhoneEntity entity) {
            return entity.$id_state;
        }

        @Override
        public void set(PhoneEntity entity, PropertyState value) {
            entity.$id_state = value;
        }
    })
    .setKey(true)
    .setGenerated(true)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final QueryAttribute<PhoneEntity, String> PHONE_NUMBER = 
    new AttributeBuilder<PhoneEntity, String>("phoneNumber", String.class)
    .setProperty(new Property<PhoneEntity, String>() {
        @Override
        public String get(PhoneEntity entity) {
            return entity.phoneNumber;
        }

        @Override
        public void set(PhoneEntity entity, String value) {
            entity.phoneNumber = value;
        }
    })
    .setPropertyName("getPhoneNumber")
    .setPropertyState(new Property<PhoneEntity, PropertyState>() {
        @Override
        public PropertyState get(PhoneEntity entity) {
            return entity.$phoneNumber_state;
        }

        @Override
        public void set(PhoneEntity entity, PropertyState value) {
            entity.$phoneNumber_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(true)
    .setUnique(false)
    .build();

    public static final QueryAttribute<PhoneEntity, Boolean> NORMALIZED = 
    new AttributeBuilder<PhoneEntity, Boolean>("normalized", boolean.class)
    .setProperty(new BooleanProperty<PhoneEntity>() {
        @Override
        public Boolean get(PhoneEntity entity) {
            return entity.normalized;
        }

        @Override
        public void set(PhoneEntity entity, Boolean value) {
            entity.normalized = value;
        }

        @Override
        public boolean getBoolean(PhoneEntity entity) {
            return entity.normalized;
        }

        @Override
        public void setBoolean(PhoneEntity entity, boolean value) {
            entity.normalized = value;
        }
    })
    .setPropertyName("getNormalized")
    .setPropertyState(new Property<PhoneEntity, PropertyState>() {
        @Override
        public PropertyState get(PhoneEntity entity) {
            return entity.$normalized_state;
        }

        @Override
        public void set(PhoneEntity entity, PropertyState value) {
            entity.$normalized_state = value;
        }
    })
    .setGenerated(false)
    .setLazy(false)
    .setNullable(false)
    .setUnique(false)
    .build();

    public static final Type<PhoneEntity> $TYPE = new TypeBuilder<PhoneEntity>(PhoneEntity.class, "Phone")
    .setBaseType(Phone.class)
    .setCacheable(true)
    .setImmutable(false)
    .setReadOnly(false)
    .setStateless(false)
    .setFactory(new Supplier<PhoneEntity>() {
        @Override
        public PhoneEntity get() {
            return new PhoneEntity();
        }
    })
    .setProxyProvider(new Function<PhoneEntity, EntityProxy<PhoneEntity>>() {
        @Override
        public EntityProxy<PhoneEntity> apply(PhoneEntity entity) {
            return entity.$proxy;
        }
    })
    .addAttribute(OWNER)
    .addAttribute(ID)
    .addAttribute(PHONE_NUMBER)
    .addAttribute(NORMALIZED)
    .addExpression(OWNER_ID)
    .build();

    private PropertyState $owner_state;

    private PropertyState $id_state;

    private PropertyState $phoneNumber_state;

    private PropertyState $normalized_state;

    private Person owner;

    private int id;

    private String phoneNumber;

    private boolean normalized;

    private final transient EntityProxy<PhoneEntity> $proxy = new EntityProxy<PhoneEntity>(this, $TYPE);

    public PhoneEntity() {
    }

    @Override
    public Person getOwner() {
        return $proxy.get(OWNER);
    }

    public void setOwner(Person owner) {
        $proxy.set(OWNER, owner);
    }

    @Override
    public int getId() {
        return $proxy.get(ID);
    }

    public void setId(int id) {
        $proxy.set(ID, id);
    }

    @Override
    public String getPhoneNumber() {
        return $proxy.get(PHONE_NUMBER);
    }

    public void setPhoneNumber(String phoneNumber) {
        $proxy.set(PHONE_NUMBER, phoneNumber);
    }

    @Override
    public boolean getNormalized() {
        return $proxy.get(NORMALIZED);
    }

    public void setNormalized(boolean normalized) {
        $proxy.set(NORMALIZED, normalized);
    }

    @Override
    public boolean equals(Object obj) {
        return obj instanceof PhoneEntity && ((PhoneEntity)obj).$proxy.equals(this.$proxy);
    }

    @Override
    public int hashCode() {
        return $proxy.hashCode();
    }

    @Override
    public String toString() {
        return $proxy.toString();
    }
}
